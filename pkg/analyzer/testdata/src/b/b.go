// Code generated by generator. DO NOT EDIT.

package b

import (
	"context"
	"testing"
)

func nonTestHelper(b int) {}

func helperWithoutHelper(b *testing.B) {} // want "test helper function should start from b.Helper()"

func helperWithHelper(b *testing.B) {
	b.Helper()
}

func helperWithEmptyStringBeforeHelper(b *testing.B) {

	b.Helper()
}

func helperWithHelperAfterAssignment(b *testing.B) { // want "test helper function should start from b.Helper()"
	_ = 0
	b.Helper()
}

func helperWithHelperAfterOtherCall(b *testing.B) { // want "test helper function should start from b.Helper()"
	f()
	b.Helper()
}

func helperWithHelperAfterOtherSelectionCall(b *testing.B) { // want "test helper function should start from b.Helper()"
	b.Fail()
	b.Helper()
}

func helperParamNotFirst(s string, i int, b *testing.B) { // want "parameter \\*testing.B should be the first or after context.Context"
	b.Helper()
}

func helperParamSecondWithoutContext(s string, b *testing.B, i int) { // want "parameter \\*testing.B should be the first or after context.Context"
	b.Helper()
}

func helperParamSecondWithContext(ctx context.Context, b *testing.B) {
	b.Helper()
}

func helperWithIncorrectName(o *testing.B) { // want "parameter \\*testing.B should have name b"
	o.Helper()
}

func helperWithAnonymousHelper(b *testing.B) {
	b.Helper()
	func(b *testing.B) {}(b) // want "test helper function should start from b.Helper()"
}

func helperWithNoName(_ *testing.B) {
}

func f() {}
